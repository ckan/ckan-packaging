#!/usr/bin/env python

import subprocess
import re
import os
import sys
import argparse


def set_env_vars(version, pythonversion, iteration, datapusher='y', ansible_verbose='vv'):

    os.environ['CKAN_PACKAGE_VERSION'] = version
    os.environ['PYTHON_VERSION'] = pythonversion
    os.environ['CKAN_PACKAGE_ITERATION'] = iteration
    os.environ['CKAN_PACKAGE_DATAPUSHER'] = datapusher
    os.environ['CKAN_PACKAGE_ANSIBLE_VERBOSE'] = ansible_verbose


def clear_env_vars():

    for key in ['CKAN_PACKAGE_VERSION',
                'PYTHON_VERSION',
                'CKAN_PACKAGE_ITERATION',
                'CKAN_PACKAGE_DATAPUSHER',
                'CKAN_PACKAGE_ANSIBLE_VERBOSE']:
        if key in os.environ:
            del os.environ[key]


def run(target=None):

    status_xenial = None
    status_bionic = None
    status_focal = None

    print 'Checking Vagrant machines status...'
    out = subprocess.check_output(['vagrant', 'status'])

    if target is None or target == 'xenial':
            status_xenial = re.search('xenial\s*(\w+)', out).group(1)
            print 'Machine "xenial" is ' + status_xenial
            
    if target is None or target == 'bionic':
            status_bionic = re.search('bionic\s*(\w+)', out).group(1)
            print 'Machine "bionic" is ' + status_bionic

    if target is None or target == 'focal':
            status_focal = re.search('focal\s*(\w+)', out).group(1)
            print 'Machine "focal" is ' + status_focal

    if (status_xenial and status_xenial != 'running') or \
            (status_bionic and status_bionic != 'running') or \
                (status_focal and status_focal != 'running'):
        
        print 'Starting up machine(s)'
        command = ['vagrant', 'up', '--provision']
    else:
        print 'Machine(s) already started, provisioning'
        command = ['vagrant', 'provision']

    if target:
        command.append(target)

    subprocess.call(command)


if __name__ == '__main__':
    description = '''Builds CKAN deb packages.
This script essentially sets up the necessary env vars and calls `vagrant up`
or `vagrant provision` as appropiate.'''
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument('-v', '--version',
                        help='''The CKAN branch or tag to build, eg master, dev-v2.6, release-v2.5.3.
If not provided you will be propmt for it''')
    parser.add_argument('-p', '--pythonversion',
                        help='''The Python version for this package eg py2, py3
If not provided you will be propmt for it''')
    parser.add_argument('-i', '--iteration',
                        help='''The iteration number to add to the package name.
If not provided you will be prompt for it''')
    parser.add_argument('-d', '--datapusher',
                        action='store_true',
                        default='y',
                        help='''Whether to add the DataPusher to the package,
defaults to true''')
    parser.add_argument('-t', '--target',
                        help='''The distribution to target (xenial or bionic or focal).
If omitted, all are built''')
    parser.add_argument('-a', '--ansible-verbose',
                        default='vv',
                        help='Ansible verbosity level, defaults to "vv"')

    def _check_arg(args, var, prompt):
        if getattr(args, var):
            return getattr(args, var)
        var = raw_input('{0}:'.format(prompt))
        if not var:
            print('Please provide a value for the {0}'.format(prompt))
            sys.exit(1)
        return var

    args = parser.parse_args()

    version = _check_arg(args, 'version', 'CKAN Version (branch or tag)')
    pythonversion = _check_arg(args, 'pythonversion', 'Python Version (py2 or py3)')
    iteration = _check_arg(args, 'iteration', 'Iteration')
    datapusher = args.datapusher
    target = args.target
    if target and target not in ('xenial', 'bionic', 'focal'):
        print 'Wrong target: ' + target
        sys.exit(1)
    
    if target and target in ('xenial','bionic'):
        if pythonversion!="py2":
            print 'Target: ' + target + ' - Python version should be set to py2'
            sys.exit(1)
            
    ansible_verbose = args.ansible_verbose

    set_env_vars(version, pythonversion, iteration, datapusher, ansible_verbose)
    try:
        run(target)
    finally:
        clear_env_vars()
